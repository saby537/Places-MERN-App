{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","mapClassName","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirm","setShowCofirm","closeMapHandler","cancelConfirmHandler","deleteConfirmHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","imageURL","alt","tite","title","description","userID","creatorID","to","PlaceList","item","length","place","key","location","image","creator","deletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","userId","useParams","uid","responseData","places","fetchPlaces","deletePlaceID","prevPlace","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAACC,GACZ,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,uNCiBEC,G,MApBH,SAACJ,GACX,IAAMK,EAASC,mBACPC,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAShB,OARAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKT,IAAIC,EAAOS,QAAS,CACrDP,OAAQA,EACRC,KAAMA,IAER,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAAEC,SAAUT,EAAQG,IAAKA,MACtD,CAACH,EAAQC,IAGV,yBACES,IAAKZ,EACLJ,UAAS,cAASD,EAAMkB,cACxBhB,MAAOF,EAAME,U,gCCkFJiB,G,MA3FG,SAACnB,GAAW,IAAD,EAC2BoB,cAA9CC,EADmB,EACnBA,UAAWC,EADQ,EACRA,MAAOC,EADC,EACDA,YAAaC,EADZ,EACYA,WACjCC,EAAOC,qBAAWC,KAFG,EAGGC,oBAAS,GAHZ,mBAGpBC,EAHoB,KAGXC,EAHW,OAIUF,oBAAS,GAJnB,mBAIpBG,EAJoB,KAIPC,EAJO,KAMrBC,EAAkB,kBAAMH,GAAW,IAEnCI,EAAuB,kBAAMF,GAAc,IAC3CG,EAAoB,uCAAG,sBAAAC,EAAA,6DAC3BJ,GAAc,GADa,kBAGnBT,EAAY,GAAD,OACZc,yCADY,mBACgCrC,EAAMsC,IACrD,SACA,KACA,CACEC,cAAe,UAAYd,EAAKe,QARX,OAWzBxC,EAAMyC,SAASzC,EAAMsC,IAXI,uGAAH,qDAe1B,OACE,kBAAC,IAAMI,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYrB,MAAOA,EAAOsB,QAASpB,IACnC,kBAACqB,EAAA,EAAD,CACEC,KAAMjB,EACNkB,SAAUd,EACVe,OAAQhD,EAAMiD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASrB,GAAjB,UAER,yBAAKhC,UAAU,iBACb,kBAAC,EAAD,CAAKM,OAAQP,EAAMuD,YAAa/C,KAAM,OAG1C,kBAACqC,EAAA,EAAD,CACEC,KAAMf,EACNgB,SAAUb,EACVc,OAAO,gBACPG,YAAY,4BACZC,OACE,kBAAC,IAAMV,SAAP,KACE,kBAACW,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASpB,GAAzB,UAGA,kBAACmB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASnB,GAAxB,YAVN,uFAmBA,wBAAIlC,UAAU,cACZ,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACboB,GAAa,kBAACqC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAK1D,UAAU,qBACb,yBACE2D,IAAG,UAAKvB,yCAAL,YAAwCrC,EAAM6D,UACjDC,IAAK9D,EAAM+D,QAGf,yBAAK9D,UAAU,oBACb,4BAAKD,EAAMgE,OACX,4BAAKhE,EAAMiD,SACX,2BAAIjD,EAAMiE,cAEZ,yBAAKhE,UAAU,uBACb,kBAACoD,EAAA,EAAD,CAAQG,SAAO,EAACF,QApEH,kBAAMxB,GAAW,KAoE9B,YAGCL,EAAKyC,SAAWlE,EAAMmE,WACrB,kBAACd,EAAA,EAAD,CAAQe,GAAE,kBAAapE,EAAMsC,KAA7B,QAEDb,EAAKyC,SAAWlE,EAAMmE,WACrB,kBAACd,EAAA,EAAD,CAAQI,QAAM,EAACH,QAzEA,kBAAMtB,GAAc,KAyEnC,gBCtDCqC,EA9BG,SAACrE,GACjB,OAA0B,IAAtBA,EAAMsE,KAAKC,OAEX,yBAAKtE,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kDACA,kBAACsD,EAAA,EAAD,CAAQe,GAAG,eAAX,iBAMN,wBAAInE,UAAU,cACXD,EAAMsE,KAAK5D,KAAI,SAAC8D,GAAD,OACd,kBAAC,EAAD,CACEC,IAAKD,EAAMlC,GACXA,GAAIkC,EAAMlC,GACV0B,MAAOQ,EAAMR,MACbf,QAASuB,EAAMvB,QACfM,YAAaiB,EAAME,SACnBb,SAAUW,EAAMG,MAChBR,UAAWK,EAAMI,QACjBX,YAAaO,EAAMP,YACnBxB,SAAUzC,EAAM6E,mBCwBXC,UA7CI,SAAC9E,GAAW,IAAD,EAC0BoB,cAA9CC,EADoB,EACpBA,UAAWC,EADS,EACTA,MAAOC,EADE,EACFA,YAAaC,EADX,EACWA,WADX,EAEYI,qBAFZ,mBAErBmD,EAFqB,KAEPC,EAFO,KAItBC,EAASC,cAAYC,IAC3B1E,qBAAU,YACS,uCAAG,4BAAA2B,EAAA,+EAEWb,EAAY,GAAD,OACjCc,yCADiC,wBACgB4C,IAHtC,OAEVG,EAFU,OAKhBJ,EAAgBI,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAAC/D,EAAa0D,IAOjB,OACE,kBAAC,IAAMvC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYrB,MAAOA,EAAOsB,QAASpB,IAClCH,GACC,yBAAKpB,UAAU,UACb,kBAACyD,EAAA,EAAD,QAGFrC,GAAa0D,GACb,kBAAC,EAAD,CAAWT,KAAMS,EAAcF,YAdV,SAACU,GAC1BP,GAAgB,SAACQ,GAAD,OACdA,EAAUC,QAAO,SAACjB,GAAD,OAAWA,EAAMlC,KAAOiD,YAcvClE,IAAc0D,GACd,yBAAK9E,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kDACA,kBAACsD,EAAA,EAAD,CAAQe,GAAG,eAAX","file":"static/js/7.1d65521b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from \"react\";\n\nimport \"./Map.css\";\n\nconst Map = (props) => {\n  const mapRef = useRef();\n  const { center, zoom } = props;\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.mapClassName}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, useContext } from \"react\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./PlaceItem.css\";\nconst PlaceItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirm, setShowCofirm] = useState(false);\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const openConfirmHandler = () => setShowCofirm(true);\n  const cancelConfirmHandler = () => setShowCofirm(false);\n  const deleteConfirmHandler = async () => {\n    setShowCofirm(false);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\n        \"DELETE\",\n        null,\n        {\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16}></Map>\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirm}\n        onCancel={cancelConfirmHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelConfirmHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={deleteConfirmHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        Do you really want to delete the place. Once deleted the place cannot be\n        recovered.\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.imageURL}`}\n              alt={props.tite}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              MAP VIEW\n            </Button>\n            {auth.userID === props.creatorID && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userID === props.creatorID && (\n              <Button danger onClick={openConfirmHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from \"react\";\nimport \"./PlaceList.css\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport PlaceItem from \"./PlaceItem\";\n\nconst PlaceList = (props) => {\n  if (props.item.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>Place not found !!</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"place-list\">\n      {props.item.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          title={place.title}\n          address={place.address}\n          coordinates={place.location}\n          imageURL={place.image}\n          creatorID={place.creator}\n          description={place.description}\n          onDelete={props.deletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PlaceList from \"../components/PlaceList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nconst UserPlaces = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlaces, setLoadedPlaces] = useState();\n\n  const userId = useParams().uid;\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const deletePlaceHandler = (deletePlaceID) => {\n    setLoadedPlaces((prevPlace) =>\n      prevPlace.filter((place) => place.id !== deletePlaceID)\n    );\n  };\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList item={loadedPlaces} deletePlace={deletePlaceHandler} />\n      )}\n      {!isLoading && !loadedPlaces && (\n        <div className=\"place-list center\">\n          <Card>\n            <h2>Place not found !!</h2>\n            <Button to=\"/places/new\">Share Place</Button>\n          </Card>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}